package doobie

import cats.effect.IOApp
import cats.effect.ExitCode
import cats.effect.IO

import doobie.implicits.*

// Left video at 29:00

object DoobieDemo extends IOApp:

  case class Actor(id: Int, name: String)

  case class Movie(
    id: String,
    title: String,
    year: Int,
    actors: List[String],
    diretor: String,
  )

  extension [A](io: IO[A])

    def myDebug(): IO[A] = io.map { v =>
      println(s"[${Thread.currentThread().getName()}] $v")
      v
    }

  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    driver = "org.postgresql.Driver",
    url = "jdbc:postgresql:myimdb", // Localhost by default
    user = "docker",
    password = "docker",
    logHandler = None,
  )

  def findAllActorNames: IO[List[String]] =
    val query = sql"select name from actors".query[String]
    val action = query.to[List]
    action.transact(xa)

  def findActorById(id: Int): IO[Actor] =
    val query = sql"select id, name from actors where id=$id".query[Actor]
    val action = query.unique
    action.transact(xa)

  def findActorByIdOpt(id: Int): IO[Option[Actor]] =
    val query = sql"select id, name from actors where id=$id".query[Actor]
    val action = query.option
    action.transact(xa)

  // HC, HPS
  def findActorByName(name: String): IO[Option[Actor]] =
    val queryString = "select id, name from actors where name = ?"
    HC.stream[Actor](queryString, HPS.set(name), 100).compile.toList.map(_.headOption).transact(xa)

  // Fragments
  def findActorsByInitialLetter(letter: String): IO[List[Actor]] =
    val selectPart = fr"select id, name"
    val fromPart = fr"from actors"
    val wherePart = fr"where LEFT(name, 1) = $letter"
    val statement = selectPart ++ fromPart ++ wherePart
    statement.query[Actor].stream.compile.toList.transact(xa)

  // Update
  def saveActor(id: Int, name: String): IO[Int] =
    val query = sql"insert into actors (id, name) values ($id, $name)"
    query.update.run.transact(xa)

  def saveActor_v2(id: Int, name: String): IO[Int] =
    val query = "insert into actors (id, name) values (?, ?)"
    Update[Actor](query).run(Actor(id, name)).transact(xa)

  // Autogenerated IDs
  def saveActorAutoGenerated(name: String): IO[Int] =
    val query = sql"insert into actors (name) values ($name)"
    query.update.withUniqueGeneratedKeys[Int]("id").transact(xa)

  override def run(args: List[String]): IO[ExitCode] =
    saveActor_v2(8, "Mary").myDebug().as(ExitCode.Success)
